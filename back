import java.util.*;
import javax.swing.table.*;
import java.net.*;
import java.io.*;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
class FileModel extends AbstractTableModel
{
private ArrayList<File> files;
FileModel()
{
this.files=new ArrayList<>();
}
public ArrayList<File> getFiles()
{
return files;
}
public int getRowCount()
{
return this.files.size();
}
public int getColumnCount()
{
return 2;
}
public String getColumnName(int c)
{
if(c==0) return "S.No";
return "File";
}
public Class getColumnClass(int c)
{
if(c==0) return Integer.class;
return String.class;
}
public boolean isCellEditable(int r,int c)
{
return false;
}
public Object getValueAt(int r,int c)
{
if(c==0) return (r+1);
return this.files.get(r).getAbsolutePath();
}
public void add(File file)
{
this.files.add(file);
fireTableDataChanged();
}
} 
class FTClientFrame extends JFrame
{
private String host;
private int portNumber;
private FileSelectionPanel fileSelectionPanel;
private FileUploadViewPanel fileUploadViewPanel;
private Container container;
FTClientFrame(String host,int portNumber)
{
this.host=host;
this.portNumber=portNumber;
fileSelectionPanel = new FileSelectionPanel();
fileUploadViewPanel = new FileUploadViewPanel();
container = getContentPane();
container.setLayout(new GridLayout(1,2));
container.add(fileSelectionPanel);
container.add(fileUploadViewPanel);
setSize(1200,600);
setLocation(10,20);
setVisible(true);
}
public void setBytesUploaded(String id,long bytes)
{

}
public void fileUploaded(String id)
{

}
class FileSelectionPanel extends JPanel implements ActionListener
{
private JLabel titleLabel;
private FileModel model;
private JTable table;
private JScrollPane jsp;
private JButton addFileButton;
FileSelectionPanel()
{
setLayout(new BorderLayout());
titleLabel = new JLabel("Selected Files");
model=new FileModel();
table = new JTable(model);
jsp = new JScrollPane(table,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
addFileButton = new JButton("Add File");
addFileButton.addActionListener(this);
add(titleLabel,BorderLayout.NORTH);
add(jsp,BorderLayout.CENTER);
add(addFileButton,BorderLayout.SOUTH);
}
public ArrayList<File> getFiles()
{
return model.getFiles();
}
public void actionPerformed(ActionEvent ev)
{
JFileChooser jfc = new JFileChooser();
jfc.setCurrentDirectory(new File("."));
int selectedOption = jfc.showOpenDialog(this);
if(selectedOption==jfc.APPROVE_OPTION)
{
File selectedFile = jfc.getSelectedFile();
model.add(selectedFile);
}
}
} //inner class ends
class FileUploadViewPanel extends JPanel implements ActionListener
{
private JButton uploadFilesButton;
private JPanel progressPanelsContainer;
private JScrollPane jsp;
private ArrayList<ProgressPanel> progressPanels;
ArrayList<File> files;
FileUploadViewPanel()
{
uploadFilesButton = new JButton("Upload");
setLayout(new BorderLayout());
add(uploadFilesButton,BorderLayout.NORTH);
uploadFilesButton.addActionListener(this);
}
public void actionPerformed(ActionEvent ev)
{
files=fileSelectionPanel.getFiles();
if(files.size()==0)
{
JOptionPane.showMessageDialog(FTClientFrame.this,"No files selected to upload");
return;
}
progressPanelsContainer = new JPanel();
progressPanelsContainer.setLayout(new GridLayout(files.size(),1));
ProgressPanel progressPanel;
progressPanels=new ArrayList<>();
for(File file:files)
{
progressPanel = new ProgressPanel(file);
progressPanels.add(progressPanel);
progressPanelsContainer.add(progressPanel);
}
jsp = new JScrollPane(progressPanelsContainer,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
add(jsp,BorderLayout.CENTER);
this.revalidate();
this.repaint();
}

class ProgressPanel extends JPanel
{
private File file;
private JLabel fileNameLabel;
private JProgressBar progressBar;
private long fileLength;
public ProgressPanel(File file)
{
this.file=file;
this.fileLength = file.length();
fileNameLabel = new JLabel("Uploading : "+file.getAbsolutePath());
progressBar = new JProgressBar(1,100);
setLayout(new GridLayout(2,1));
add(fileNameLabel);
add(progressBar);
}
public void updateProgressBar(long bytesUploaded)
{
int percentage;
if(bytesUploaded==fileLength) percentage = 100;
else
percentage =(int) ((bytesUploaded*100)/fileLength);
progressBar.setValue(percentage);
if(percentage==100)
{
fileNameLabel.setText("Uploaded : "+file.getAbsolutePath());
}
}
} //progress panel ends
} //file selection panel eds

public static void main(String gg[])
{
FTClientFrame fcf = new FTClientFrame("localhost",5500);
}
} 
class FileUploadThread extends Thread
{
private FTClientFrame fcf;
private String id;
private File file;
private String host;
private int portNumber;
FileUploadThread(FTClientFrame fcf,String id,File file,String host,int portNumber)
{
this.fcf=fcf;
this.id=id;
this.file=file;
this.host = host;
this.portNumber=portNumber;
}
public void run()
{
try
{
long lengthOfFile = file.length();
String name = file.getName();
byte header[] = new byte[1024];
int i;
long x,k;
i = 0;
k=lengthOfFile;
while(k>0)
{
header[i]=(byte)(k%10);
k=k/10;
i++;
}
header[i] = (byte)',';
i++;
x=name.length();
int r = 0;
while(r<x)
{
header[i]=(byte)name.charAt(r);
i++;
r++;
}
while(i<=1023)
{
header[i]=(byte)32;
i++;
}
Socket socket=new Socket(host,portNumber);
OutputStream os = socket.getOutputStream();
os.write(header,0,1024); //from which index, how many
os.flush();
InputStream is = socket.getInputStream();
byte ack[] = new byte[1];
int bytesReadCount;
while(true)
{
bytesReadCount = is.read(ack);
if(bytesReadCount==-1) continue;
break;
}
FileInputStream fis = new FileInputStream(file);
int chunkSize = 4096;
byte bytes[] = new byte[chunkSize];
int j = 0;
while(j<lengthOfFile)
{
bytesReadCount = fis.read(bytes);
os.write(bytes,0,bytesReadCount);
os.flush();
j=j+bytesReadCount;
long brc = bytesReadCount;
SwingUtilities.invokeLater(()->{
fcf.setBytesUploaded(id,brc);
});
}
fis.close();
while(true)
{
bytesReadCount =is.read(ack);
if(bytesReadCount==-1) continue;
break;
}
socket.close();
SwingUtilities.invokeLater(()->{
fcf.fileUploaded(id);
});
}catch(Exception e)
{
System.out.println(e);
}
}
}
import java.util.*;
import java.io.*;
import java.net.*;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
class RequestProcessor extends Thread
{
private Socket socket;
private String id;
private FTServerFrame fsf;
RequestProcessor(Socket socket,String id,FTServerFrame fsf)
{
this.id=id;
this.fsf=fsf;
this.socket=socket;
start();
}
public void run()
{
try
{
SwingUtilities.invokeLater(new Runnable(){
public void run()
{
fsf.updateLog("Client connected and id alloted is : "+id);
}
});
InputStream is=socket.getInputStream();
OutputStream os = socket.getOutputStream();
int bytesToReceive=1024;
byte tmp[] = new byte[1024];
byte header[] = new byte[1024];
int bytesReadCount;
int i,j,k;
i=0;
j=0;
while(j<bytesToReceive)
{
bytesReadCount = is.read(tmp);
if(bytesReadCount==-1) continue;
for(k=0;k<bytesReadCount;k++)
{
header[i] = tmp[k];
i++;
}
j=j+bytesReadCount;
}
int lengthOfFile = 0;
i=0;
j=1;
while(header[i]!=',')
{
lengthOfFile = lengthOfFile+(header[i]*j);
j=j*10;
i++;
}
i++;
StringBuffer sb = new StringBuffer();
while(i<=1023)
{
sb.append((char)header[i]);
i++;
}
String fileName = sb.toString().trim();
int lof = lengthOfFile;
SwingUtilities.invokeLater(()->{
fsf.updateLog("Receving file : "+fileName+" of length: "+lof);
});
File file = new File("uploads"+File.separator+fileName);
if(file.exists()) file.delete();
FileOutputStream fos = new FileOutputStream(file);
byte ack[] = new byte[1];
ack[0]=1;
os.write(ack,0,1); 
os.flush();
int chunkSize = 4096;
byte bytes[] = new byte[chunkSize];
i=0;
long m;
m = 0;
while(m<lengthOfFile)
{
bytesReadCount = is.read(bytes);
if(bytesReadCount==-1) continue;
fos.write(bytes,0,bytesReadCount);// which index and how many
fos.flush(); 
m=m+bytesReadCount;
}
fos.close();
ack[0]=1;
os.write(ack,0,1);
os.flush();
SwingUtilities.invokeLater(()->{
fsf.updateLog("File Saved to "+file.getAbsolutePath());
fsf.updateLog("Connection with client whoose id is "+id+" closed");
});
socket.close();
}catch(Exception e)
{
System.out.println(e);
}
}
}
class FTServer extends Thread
{
private ServerSocket serverSocket;
private FTServerFrame fsf;
FTServer(FTServerFrame fsf)
{
this.fsf=fsf;
}
public void run()
{
try
{
serverSocket = new ServerSocket(5500);
startListening();
}catch(Exception e)
{
System.out.println(e);
}
}
private void startListening()
{
try
{
Socket socket;
RequestProcessor requestProcessor;
while(true)
{
System.out.println("Server Started");
SwingUtilities.invokeLater(new Thread(){
public void run()
{
fsf.updateLog("Server Started and is listening on port 5500");
}
});
socket = serverSocket.accept();  
requestProcessor=new RequestProcessor(socket,UUID.randomUUID().toString(),fsf);
}
}catch(Exception e)
{
System.out.println(e);
}
}
}
class FTServerFrame extends JFrame implements ActionListener
{
private FTServer server;
private JButton button;
private Container container;
private JTextArea jta;
private JScrollPane jsp;
private boolean serverState=false;
FTServerFrame()
{
container = getContentPane();
container.setLayout(new BorderLayout());
button = new JButton("Start");
jta = new JTextArea();
jsp=new JScrollPane(jta,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
container.add(jsp,BorderLayout.CENTER);
container.add(button,BorderLayout.SOUTH);
setLocation(100,100);
setSize(500,500);
setVisible(true);
button.addActionListener(this);
}
public void updateLog(String message)
{
jta.append(message+"\n");
}
public void actionPerformed(ActionEvent ev)
{
if(serverState==false)
{
server = new FTServer(this);
server.start();
serverState=true;
button.setText("Stop");
}
else
{
}
}
public static void main(String gg[])
{
FTServerFrame fsf = new FTServerFrame();
}
}